(()=>{"use strict";var t={341:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ERC20TransactionBuilder=e.RawTransactionBuilder=void 0;const a=n(r(929));e.RawTransactionBuilder=a.default;const i=r(510);Object.defineProperty(e,"ERC20TransactionBuilder",{enumerable:!0,get:function(){return i.ERC20TransactionBuilder}})},510:function(t,e,r){var n,a=this&&this.__classPrivateFieldSet||function(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r},i=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ERC20TransactionBuilder=void 0;const o=s(r(929));class c extends o.default{constructor(t,e){super(t),n.set(this,void 0),a(this,n,e)}async transfer(t,e){const r=i(this,n).interface.encodeFunctionData("transfer",[t,e]);return this.createSafeTransaction(r)}async transferFrom(t,e,r){const a=i(this,n).interface.encodeFunctionData("transferFrom",[t,e,r]);return this.createSafeTransaction(a)}async approve(t,e){const r=i(this,n).interface.encodeFunctionData("approve",[t,e]);return this.createSafeTransaction(r)}createSafeTransaction(t){return this.rawTransaction(i(this,n).address,"0",t)}}e.ERC20TransactionBuilder=c,n=new WeakMap,e.default=c},929:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RawTransactionBuilder=void 0;const a=n(r(683));class i extends a.default{constructor(t){super(t)}rawTransaction(t,e,r){return this.safe.createTransaction({to:t,data:r,value:e})}}e.RawTransactionBuilder=i,e.default=i},683:function(t,e){var r,n=this&&this.__classPrivateFieldSet||function(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r},a=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.TransactionBuilderAbstract=void 0;class i{constructor(t){r.set(this,void 0),n(this,r,t)}get safe(){return a(this,r)}}e.TransactionBuilderAbstract=i,r=new WeakMap,e.default=i}},e={},r=function r(n){var a=e[n];if(void 0!==a)return a.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}(341),n=exports;for(var a in r)n[a]=r[a];r.__esModule&&Object.defineProperty(n,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcnNrc21hcnQvc2FmZS10cmFuc2FjdGlvbnMtc2RrLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL0Byc2tzbWFydC9zYWZlLXRyYW5zYWN0aW9ucy1zZGsvLi9zcmMvdHJhbnNhY3Rpb24tYnVpbGRlcnMvRVJDMjBUcmFuc2FjdGlvbkJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vQHJza3NtYXJ0L3NhZmUtdHJhbnNhY3Rpb25zLXNkay8uL3NyYy90cmFuc2FjdGlvbi1idWlsZGVycy9SYXdUcmFuc2FjdGlvbkJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vQHJza3NtYXJ0L3NhZmUtdHJhbnNhY3Rpb25zLXNkay8uL3NyYy90cmFuc2FjdGlvbi1idWlsZGVycy9UcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdC50cyIsIndlYnBhY2s6Ly9AcnNrc21hcnQvc2FmZS10cmFuc2FjdGlvbnMtc2RrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0Byc2tzbWFydC9zYWZlLXRyYW5zYWN0aW9ucy1zZGsvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIlJhd1RyYW5zYWN0aW9uQnVpbGRlciIsIkVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyIiwic2FmZSIsImVyYzIwQ29udHJhY3QiLCJzdXBlciIsInRoaXMiLCJ0byIsInZhbHVlIiwidHJhbnNhY3Rpb25EYXRhIiwiaW50ZXJmYWNlIiwiZW5jb2RlRnVuY3Rpb25EYXRhIiwiY3JlYXRlU2FmZVRyYW5zYWN0aW9uIiwiZnJvbSIsInNwZW5kZXIiLCJhbW91bnQiLCJyYXdUcmFuc2FjdGlvbiIsImFkZHJlc3MiLCJkYXRhIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwibWFwcGluZ3MiOiI0T0FBQSxrQkFHUyxFQUFBQSxzQkFIRixVQUNQLGVBRWdDLHVGQUZ2QixFQUFBQyw0QixnZkNBVCxrQkFHQSxNQUFhQSxVQUFnQyxVQUczQyxZQUFZQyxFQUFZQyxHQUN0QkMsTUFBTUYsR0FIUixtQkFJRSxFQUFBRyxLQUFJLEVBQWtCRixHQUd4QixlQUFlRyxFQUFZQyxHQUN6QixNQUFNQyxFQUFrQixFQUFBSCxLQUFBLEdBQW9CSSxVQUFVQyxtQkFBbUIsV0FBWSxDQUNuRkosRUFDQUMsSUFFRixPQUFPRixLQUFLTSxzQkFBc0JILEdBR3BDLG1CQUFtQkksRUFBY04sRUFBWUMsR0FDM0MsTUFBTUMsRUFBa0IsRUFBQUgsS0FBQSxHQUFvQkksVUFBVUMsbUJBQW1CLGVBQWdCLENBQ3ZGRSxFQUNBTixFQUNBQyxJQUVGLE9BQU9GLEtBQUtNLHNCQUFzQkgsR0FHcEMsY0FBY0ssRUFBaUJDLEdBQzdCLE1BQU1OLEVBQWtCLEVBQUFILEtBQUEsR0FBb0JJLFVBQVVDLG1CQUFtQixVQUFXLENBQ2xGRyxFQUNBQyxJQUVGLE9BQU9ULEtBQUtNLHNCQUFzQkgsR0FHNUIsc0JBQXNCQSxHQUM1QixPQUFPSCxLQUFLVSxlQUFlLEVBQUFWLEtBQUEsR0FBb0JXLFFBQVMsSUFBS1IsSUFsQ2pFLDRCLGNBc0NBLFVBQWVQLEcsd0xDekNmLGtCQUVBLE1BQWFELFVBQThCLFVBQ3pDLFlBQVlFLEdBQ1ZFLE1BQU1GLEdBR1IsZUFBZUksRUFBWUMsRUFBZVUsR0FDeEMsT0FBT1osS0FBS0gsS0FBS2dCLGtCQUFrQixDQUNqQ1osS0FDQVcsT0FDQVYsV0FUTiwwQkFjQSxVQUFlUCxHLGlhQ2ZmLE1BQXNCbUIsRUFHcEIsWUFBWWpCLEdBRlosbUJBR0UsRUFBQUcsS0FBSSxFQUFTSCxHQUdmLFdBQ0UsT0FBTyxFQUFQLFNBUkosK0IsY0FZQSxVQUFlaUIsSUNiWEMsRUFBMkIsR0NFM0JDLEVEQ0osU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVKLEVBQXlCRyxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYUUsUUFHckIsSUFBSUMsRUFBU1AsRUFBeUJHLEdBQVksQ0FHakRHLFFBQVMsSUFPVixPQUhBRSxFQUFvQkwsR0FBVU0sS0FBS0YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0osR0FHcEVLLEVBQU9ELFFDbEJXSixDQUFvQixLIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJhd1RyYW5zYWN0aW9uQnVpbGRlciBmcm9tICcuL3RyYW5zYWN0aW9uLWJ1aWxkZXJzL1Jhd1RyYW5zYWN0aW9uQnVpbGRlcidcbmltcG9ydCB7IEVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi90cmFuc2FjdGlvbi1idWlsZGVycy9FUkMyMFRyYW5zYWN0aW9uQnVpbGRlcidcblxuZXhwb3J0IHsgUmF3VHJhbnNhY3Rpb25CdWlsZGVyLCBFUkMyMFRyYW5zYWN0aW9uQnVpbGRlciB9XG4iLCJpbXBvcnQgeyBDb250cmFjdCwgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IFJhd1RyYW5zYWN0aW9uQnVpbGRlciBmcm9tICcuL1Jhd1RyYW5zYWN0aW9uQnVpbGRlcidcbmltcG9ydCB7IFNhZmUsIFNhZmVUcmFuc2FjdGlvbiB9IGZyb20gJ0Bnbm9zaXMucG0vc2FmZS1jb3JlLXNkaydcblxuZXhwb3J0IGNsYXNzIEVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyIGV4dGVuZHMgUmF3VHJhbnNhY3Rpb25CdWlsZGVyIHtcbiAgI2VyYzIwQ29udHJhY3QhOiBDb250cmFjdFxuXG4gIGNvbnN0cnVjdG9yKHNhZmU6IFNhZmUsIGVyYzIwQ29udHJhY3Q6IENvbnRyYWN0KSB7XG4gICAgc3VwZXIoc2FmZSlcbiAgICB0aGlzLiNlcmMyMENvbnRyYWN0ID0gZXJjMjBDb250cmFjdFxuICB9XG5cbiAgYXN5bmMgdHJhbnNmZXIodG86IHN0cmluZywgdmFsdWU6IEJpZ051bWJlcik6IFByb21pc2U8U2FmZVRyYW5zYWN0aW9uPiB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25EYXRhID0gdGhpcy4jZXJjMjBDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKCd0cmFuc2ZlcicsIFtcbiAgICAgIHRvLFxuICAgICAgdmFsdWVcbiAgICBdKVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZVNhZmVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkRhdGEpXG4gIH1cblxuICBhc3luYyB0cmFuc2ZlckZyb20oZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCB2YWx1ZTogQmlnTnVtYmVyKTogUHJvbWlzZTxTYWZlVHJhbnNhY3Rpb24+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbkRhdGEgPSB0aGlzLiNlcmMyMENvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoJ3RyYW5zZmVyRnJvbScsIFtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIHZhbHVlXG4gICAgXSlcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTYWZlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhKVxuICB9XG5cbiAgYXN5bmMgYXBwcm92ZShzcGVuZGVyOiBzdHJpbmcsIGFtb3VudDogQmlnTnVtYmVyKTogUHJvbWlzZTxTYWZlVHJhbnNhY3Rpb24+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbkRhdGEgPSB0aGlzLiNlcmMyMENvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoJ2FwcHJvdmUnLCBbXG4gICAgICBzcGVuZGVyLFxuICAgICAgYW1vdW50XG4gICAgXSlcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTYWZlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhKVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTYWZlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhOiBzdHJpbmcpOiBQcm9taXNlPFNhZmVUcmFuc2FjdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLnJhd1RyYW5zYWN0aW9uKHRoaXMuI2VyYzIwQ29udHJhY3QuYWRkcmVzcywgJzAnLCB0cmFuc2FjdGlvbkRhdGEpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRVJDMjBUcmFuc2FjdGlvbkJ1aWxkZXJcbiIsImltcG9ydCB7IFNhZmUsIFNhZmVUcmFuc2FjdGlvbiB9IGZyb20gJ0Bnbm9zaXMucG0vc2FmZS1jb3JlLXNkaydcbmltcG9ydCBUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCBmcm9tICcuL1RyYW5zYWN0aW9uQnVpbGRlckFic3RyYWN0J1xuXG5leHBvcnQgY2xhc3MgUmF3VHJhbnNhY3Rpb25CdWlsZGVyIGV4dGVuZHMgVHJhbnNhY3Rpb25CdWlsZGVyQWJzdHJhY3Qge1xuICBjb25zdHJ1Y3RvcihzYWZlOiBTYWZlKSB7XG4gICAgc3VwZXIoc2FmZSlcbiAgfVxuXG4gIHJhd1RyYW5zYWN0aW9uKHRvOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFByb21pc2U8U2FmZVRyYW5zYWN0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZS5jcmVhdGVUcmFuc2FjdGlvbih7XG4gICAgICB0byxcbiAgICAgIGRhdGEsXG4gICAgICB2YWx1ZVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmF3VHJhbnNhY3Rpb25CdWlsZGVyXG4iLCJpbXBvcnQgeyBTYWZlIH0gZnJvbSAnQGdub3Npcy5wbS9zYWZlLWNvcmUtc2RrJ1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVHJhbnNhY3Rpb25CdWlsZGVyQWJzdHJhY3Qge1xuICAjc2FmZSE6IFNhZmVcblxuICBjb25zdHJ1Y3RvcihzYWZlOiBTYWZlKSB7XG4gICAgdGhpcy4jc2FmZSA9IHNhZmVcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgc2FmZSgpOiBTYWZlIHtcbiAgICByZXR1cm4gdGhpcy4jc2FmZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zYWN0aW9uQnVpbGRlckFic3RyYWN0XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0MSk7XG4iXSwic291cmNlUm9vdCI6IiJ9
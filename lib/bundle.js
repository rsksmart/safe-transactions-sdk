(()=>{"use strict";var t={341:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ERC20TransactionBuilder=e.RawTransactionBuilder=void 0;const a=n(r(929));e.RawTransactionBuilder=a.default;const i=r(510);Object.defineProperty(e,"ERC20TransactionBuilder",{enumerable:!0,get:function(){return i.ERC20TransactionBuilder}})},510:function(t,e,r){var n,a=this&&this.__classPrivateFieldSet||function(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r},i=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ERC20TransactionBuilder=void 0;const o=s(r(929));class c extends o.default{constructor(t,e){super(t),n.set(this,void 0),a(this,n,e)}async transfer(t,e){const r=i(this,n).interface.encodeFunctionData("transfer",[t,e]);return this.createSafeTransaction(r)}async transferFrom(t,e,r){const a=i(this,n).interface.encodeFunctionData("transferFrom",[t,e,r]);return this.createSafeTransaction(a)}async approve(t,e){const r=i(this,n).interface.encodeFunctionData("approve",[t,e]);return this.createSafeTransaction(r)}createSafeTransaction(t){return this.rawTransaction(i(this,n).address,"0",t)}}e.ERC20TransactionBuilder=c,n=new WeakMap,e.default=c},929:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RawTransactionBuilder=void 0;const a=n(r(683));class i extends a.default{constructor(t){super(t)}rawTransaction(t,e,r){return this.safe.createTransaction({to:t,data:r,value:e})}}e.RawTransactionBuilder=i,e.default=i},683:function(t,e){var r,n=this&&this.__classPrivateFieldSet||function(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r},a=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.TransactionBuilderAbstract=void 0;class i{constructor(t){r.set(this,void 0),n(this,r,t)}get safe(){return a(this,r)}}e.TransactionBuilderAbstract=i,r=new WeakMap,e.default=i}},e={};!function r(n){var a=e[n];if(void 0!==a)return a.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}(341)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWZlLXRyYW5zYWN0aW9ucy1zZGsvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vc2FmZS10cmFuc2FjdGlvbnMtc2RrLy4vc3JjL3RyYW5zYWN0aW9uLWJ1aWxkZXJzL0VSQzIwVHJhbnNhY3Rpb25CdWlsZGVyLnRzIiwid2VicGFjazovL3NhZmUtdHJhbnNhY3Rpb25zLXNkay8uL3NyYy90cmFuc2FjdGlvbi1idWlsZGVycy9SYXdUcmFuc2FjdGlvbkJ1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vc2FmZS10cmFuc2FjdGlvbnMtc2RrLy4vc3JjL3RyYW5zYWN0aW9uLWJ1aWxkZXJzL1RyYW5zYWN0aW9uQnVpbGRlckFic3RyYWN0LnRzIiwid2VicGFjazovL3NhZmUtdHJhbnNhY3Rpb25zLXNkay93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zYWZlLXRyYW5zYWN0aW9ucy1zZGsvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIlJhd1RyYW5zYWN0aW9uQnVpbGRlciIsIkVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyIiwic2FmZSIsImVyYzIwQ29udHJhY3QiLCJzdXBlciIsInRoaXMiLCJ0byIsInZhbHVlIiwidHJhbnNhY3Rpb25EYXRhIiwiaW50ZXJmYWNlIiwiZW5jb2RlRnVuY3Rpb25EYXRhIiwiY3JlYXRlU2FmZVRyYW5zYWN0aW9uIiwiZnJvbSIsInNwZW5kZXIiLCJhbW91bnQiLCJyYXdUcmFuc2FjdGlvbiIsImFkZHJlc3MiLCJkYXRhIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJtYXBwaW5ncyI6IjRPQUFBLGtCQUtJLEVBQUFBLHNCQUxHLFVBQ1AsZUFLSSx1RkFMSyxFQUFBQyw0QixnZkNBVCxrQkFHQSxNQUFhQSxVQUFnQyxVQUczQyxZQUFZQyxFQUFZQyxHQUN0QkMsTUFBTUYsR0FIUixtQkFJRSxFQUFBRyxLQUFJLEVBQWtCRixHQUd4QixlQUFlRyxFQUFZQyxHQUN6QixNQUFNQyxFQUFrQixFQUFBSCxLQUFBLEdBQW9CSSxVQUFVQyxtQkFBbUIsV0FBWSxDQUNuRkosRUFDQUMsSUFFRixPQUFPRixLQUFLTSxzQkFBc0JILEdBR3BDLG1CQUFtQkksRUFBY04sRUFBWUMsR0FDM0MsTUFBTUMsRUFBa0IsRUFBQUgsS0FBQSxHQUFvQkksVUFBVUMsbUJBQW1CLGVBQWdCLENBQ3ZGRSxFQUNBTixFQUNBQyxJQUVGLE9BQU9GLEtBQUtNLHNCQUFzQkgsR0FHcEMsY0FBY0ssRUFBaUJDLEdBQzdCLE1BQU1OLEVBQWtCLEVBQUFILEtBQUEsR0FBb0JJLFVBQVVDLG1CQUFtQixVQUFXLENBQ2xGRyxFQUNBQyxJQUVGLE9BQU9ULEtBQUtNLHNCQUFzQkgsR0FHNUIsc0JBQXNCQSxHQUM1QixPQUFPSCxLQUFLVSxlQUFlLEVBQUFWLEtBQUEsR0FBb0JXLFFBQVMsSUFBS1IsSUFsQ2pFLDRCLGNBc0NBLFVBQWVQLEcsd0xDekNmLGtCQUdBLE1BQWFELFVBQThCLFVBQ3pDLFlBQVlFLEdBQ1ZFLE1BQU1GLEdBR1IsZUFBZUksRUFBWUMsRUFBZVUsR0FDeEMsT0FBT1osS0FBS0gsS0FBS2dCLGtCQUFrQixDQUNqQ1osS0FDQVcsT0FDQVYsV0FUTiwwQkFjQSxVQUFlUCxHLGlhQ2hCZixNQUFzQm1CLEVBR3BCLFlBQVlqQixHQUZaLG1CQUdFLEVBQUFHLEtBQUksRUFBU0gsR0FHZixXQUNFLE9BQU8sRUFBUCxTQVJKLCtCLGNBWUEsVUFBZWlCLElDYlhDLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLElBT1YsT0FIQUUsRUFBb0JMLEdBQVVNLEtBQUtGLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNKLEdBR3BFSyxFQUFPRCxRQ2xCV0osQ0FBb0IsTSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmF3VHJhbnNhY3Rpb25CdWlsZGVyIGZyb20gXCIuL3RyYW5zYWN0aW9uLWJ1aWxkZXJzL1Jhd1RyYW5zYWN0aW9uQnVpbGRlclwiO1xuaW1wb3J0IHsgRVJDMjBUcmFuc2FjdGlvbkJ1aWxkZXIgfSBmcm9tIFwiLi90cmFuc2FjdGlvbi1idWlsZGVycy9FUkMyMFRyYW5zYWN0aW9uQnVpbGRlclwiO1xuXG5cbmV4cG9ydCB7XG4gICAgUmF3VHJhbnNhY3Rpb25CdWlsZGVyLFxuICAgIEVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyXG59XG4iLCJpbXBvcnQgeyBDb250cmFjdCwgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IFJhd1RyYW5zYWN0aW9uQnVpbGRlciBmcm9tICcuL1Jhd1RyYW5zYWN0aW9uQnVpbGRlcidcbmltcG9ydCB7IFNhZmUsIFNhZmVUcmFuc2FjdGlvbiB9IGZyb20gJ0Bnbm9zaXMucG0vc2FmZS1jb3JlLXNkayc7XG5cbmV4cG9ydCBjbGFzcyBFUkMyMFRyYW5zYWN0aW9uQnVpbGRlciBleHRlbmRzIFJhd1RyYW5zYWN0aW9uQnVpbGRlciB7XG4gICNlcmMyMENvbnRyYWN0ITogQ29udHJhY3RcblxuICBjb25zdHJ1Y3RvcihzYWZlOiBTYWZlLCBlcmMyMENvbnRyYWN0OiBDb250cmFjdCkge1xuICAgIHN1cGVyKHNhZmUpXG4gICAgdGhpcy4jZXJjMjBDb250cmFjdCA9IGVyYzIwQ29udHJhY3RcbiAgfVxuXG4gIGFzeW5jIHRyYW5zZmVyKHRvOiBzdHJpbmcsIHZhbHVlOiBCaWdOdW1iZXIpOiBQcm9taXNlPFNhZmVUcmFuc2FjdGlvbj4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uRGF0YSA9IHRoaXMuI2VyYzIwQ29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUZ1bmN0aW9uRGF0YSgndHJhbnNmZXInLCBbXG4gICAgICB0byxcbiAgICAgIHZhbHVlXG4gICAgXSlcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTYWZlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhKVxuICB9XG5cbiAgYXN5bmMgdHJhbnNmZXJGcm9tKGZyb206IHN0cmluZywgdG86IHN0cmluZywgdmFsdWU6IEJpZ051bWJlcik6IFByb21pc2U8U2FmZVRyYW5zYWN0aW9uPiB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25EYXRhID0gdGhpcy4jZXJjMjBDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKCd0cmFuc2ZlckZyb20nLCBbXG4gICAgICBmcm9tLFxuICAgICAgdG8sXG4gICAgICB2YWx1ZVxuICAgIF0pXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU2FmZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uRGF0YSlcbiAgfVxuXG4gIGFzeW5jIGFwcHJvdmUoc3BlbmRlcjogc3RyaW5nLCBhbW91bnQ6IEJpZ051bWJlcik6IFByb21pc2U8U2FmZVRyYW5zYWN0aW9uPiB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25EYXRhID0gdGhpcy4jZXJjMjBDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKCdhcHByb3ZlJywgW1xuICAgICAgc3BlbmRlcixcbiAgICAgIGFtb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU2FmZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uRGF0YSlcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlU2FmZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uRGF0YTogc3RyaW5nKTogUHJvbWlzZTxTYWZlVHJhbnNhY3Rpb24+IHtcbiAgICByZXR1cm4gdGhpcy5yYXdUcmFuc2FjdGlvbih0aGlzLiNlcmMyMENvbnRyYWN0LmFkZHJlc3MsICcwJywgdHJhbnNhY3Rpb25EYXRhKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVSQzIwVHJhbnNhY3Rpb25CdWlsZGVyXG4iLCJpbXBvcnQgeyBTYWZlLCBTYWZlVHJhbnNhY3Rpb24gfSBmcm9tIFwiQGdub3Npcy5wbS9zYWZlLWNvcmUtc2RrXCJcbmltcG9ydCBUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCBmcm9tICcuL1RyYW5zYWN0aW9uQnVpbGRlckFic3RyYWN0J1xuXG5cbmV4cG9ydCBjbGFzcyBSYXdUcmFuc2FjdGlvbkJ1aWxkZXIgZXh0ZW5kcyBUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCB7XG4gIGNvbnN0cnVjdG9yKHNhZmU6IFNhZmUpIHtcbiAgICBzdXBlcihzYWZlKVxuICB9XG5cbiAgcmF3VHJhbnNhY3Rpb24odG86IHN0cmluZywgdmFsdWU6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxTYWZlVHJhbnNhY3Rpb24+IHtcbiAgICByZXR1cm4gdGhpcy5zYWZlLmNyZWF0ZVRyYW5zYWN0aW9uKHtcbiAgICAgIHRvLFxuICAgICAgZGF0YSxcbiAgICAgIHZhbHVlXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYXdUcmFuc2FjdGlvbkJ1aWxkZXJcbiIsImltcG9ydCB7IFNhZmUgfSBmcm9tIFwiQGdub3Npcy5wbS9zYWZlLWNvcmUtc2RrXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFuc2FjdGlvbkJ1aWxkZXJBYnN0cmFjdCB7XG4gICNzYWZlITogU2FmZVxuXG4gIGNvbnN0cnVjdG9yKHNhZmU6IFNhZmUpIHtcbiAgICB0aGlzLiNzYWZlID0gc2FmZVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBzYWZlKCk6IFNhZmUge1xuICAgIHJldHVybiB0aGlzLiNzYWZlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJhbnNhY3Rpb25CdWlsZGVyQWJzdHJhY3RcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzQxKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=